package de.fhb.sailboat.gui.missioncreator;

import java.awt.Frame;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.tree.TreeSelectionModel;

import org.openstreetmap.gui.jmapviewer.interfaces.MapMarker;

import de.fhb.sailboat.data.GPS;
import de.fhb.sailboat.gui.GUILogic;
import de.fhb.sailboat.gui.RootDialog;
import de.fhb.sailboat.gui.map.MissionCreatingMap;
import de.fhb.sailboat.mission.Mission;

/**
 * This class represents the graphical interface of the MissionCreator dialog.
 * 
 * @author Patrick Rutter
 */
public class MissionCreatorInterface extends RootDialog{

	private static final long serialVersionUID = 1L;
	private final static String INPUTTEXT = "Eingabe";
    private final static String INPUTTEXT_LIST = "Listennamen angeben:";
    private final static String INPUTTEXT_TASK = "Tasknamen angeben:";
    private final static String INPUTTEXT_ANGLE = "Winkel angeben";
    private final static String INPUTTEXT_POSITION = "GPS-Daten angeben";
    private final static String INPUTTEXT_LISTNAME = "Neue Liste";
    private final static String INPUTTEXT_OBSTACLE = "Hindernis";
    private final static String INPUTTEXT_OBSTACLENAME = "Neues Hindernis";
    
    private final static String INPUTTEXT_NAVIGATION_PREFIX = "NAV";
    private final static String INPUTTEXT_REACHCIRCLE = INPUTTEXT_NAVIGATION_PREFIX + " " + "ReachCircle";
    private final static String INPUTTEXT_REACHPOLYGON = INPUTTEXT_NAVIGATION_PREFIX + " " + "ReachPolygon";
    private final static String INPUTTEXT_CROSSLINE = INPUTTEXT_NAVIGATION_PREFIX + " " + "CrossLine";
    private final static String INPUTTEXT_COMPASSCOURSE = INPUTTEXT_NAVIGATION_PREFIX + " " + "CompassCourse";
    private final static String INPUTTEXT_HOLDANGLETOWIND = INPUTTEXT_NAVIGATION_PREFIX + " " + "HoldAngleToWind";
    
    private final static String INPUTTEXT_CONTROL_PREFIX = "STR";
    private final static String INPUTTEXT_PROPELLORFORWARD = INPUTTEXT_CONTROL_PREFIX + " " + "PropellorFullForward";
    private final static String INPUTTEXT_PROPELLORSTOP = INPUTTEXT_CONTROL_PREFIX + " " + "PropellorStop";
    private final static String INPUTTEXT_PROPELLORBACKWARD = INPUTTEXT_CONTROL_PREFIX + " " + "PropellorFullBackward";
    private final static String INPUTTEXT_RUDDERRIGHT = INPUTTEXT_CONTROL_PREFIX + " " + "RudderRight";
    private final static String INPUTTEXT_RUDDERNEUTRAL = INPUTTEXT_CONTROL_PREFIX + " " + "RudderNeutral";
    private final static String INPUTTEXT_RUDDERLEFT = INPUTTEXT_CONTROL_PREFIX + " " + "RudderLeft";
    private final static String INPUTTEXT_STOP = INPUTTEXT_CONTROL_PREFIX + " " + "Stop";
    
    private final static String ERRORTEXT = "Fehler";
    private final static String ERRORTEXT_ILLEGAL_INPUTNODE = "Unter Tasks können keine anderen Objekte erstellt werden!";
    //private final static String ERRORTEXT_ILLEGAL_ANGLE = "Illegale Winkelangabe!";
    private final static String ERRORTEXT_ILLEGAL_POSITION = "Illegale Positionsangabe/ Eingabe abgebrochen!";
    
    private final static String ERRORTEXT_ABORT_FILECHOOSER = "Auswahl abgebrochen.";
    
    /**
     * MissionCreatorLogic to be used. Hosts all non-interface application logic.
     */
    private MissionCreatorLogic missionCreatorLogic;
    
    /**
     * Used for visualising mission.
     */
    private MissionCreatingMap missionMap;
    
    /**
     * Creates new form MissionCreatorInterface.
     * @param parent
     * @param modal
     * @param guiLogic
     */
    public MissionCreatorInterface(java.awt.Frame parent, boolean modal, GUILogic guiLogic) {
        super(parent, modal);
        initComponents();
        this.missionCreatorLogic = new MissionCreatorLogic(guiLogic);
        this.missionCreatorLogic.missionTreeInitialize(missionTree);
        this.missionTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        
        this.missionMap = new MissionCreatingMap();
        this.missionMap.setMarkerMode(9001); // no current mode for nuffin, so let it be over 9000
        missionMap.mapPanel(missionMapPanel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        missionTreePopup = new javax.swing.JPopupMenu();
        treePopupNewMenu = new javax.swing.JMenu();
        treePopupNewMenuList = new javax.swing.JMenuItem();
        treePopupNewMenuTaskMenu = new javax.swing.JMenu();
        treePopupNewMenuTaskMenu_Navigation = new javax.swing.JMenu();
        treePopupNewMenuTaskMenu_Navigation_ReachCircle = new javax.swing.JMenuItem();
        treePopupNewMenuTaskMenu_Navigation_ReachPolygon = new javax.swing.JMenuItem();
        treePopupNewMenuTaskMenu_Navigation_CrossLine = new javax.swing.JMenuItem();
        treePopupNewMenuTaskMenu_Navigation_CompassCourse = new javax.swing.JMenuItem();
        treePopupNewMenuTaskMenu_Navigation_HoldAngleCourseToWind = new javax.swing.JMenuItem();
        treePopupNewMenuTaskMenu_Control = new javax.swing.JMenu();
        treePopupNewMenuTaskMenu_Control_PropellorFullForward = new javax.swing.JMenuItem();
        treePopupNewMenuTaskMenu_Control_PropellorFullStop = new javax.swing.JMenuItem();
        treePopupNewMenuTaskMenu_Control_PropellorFullBackward = new javax.swing.JMenuItem();
        treePopupNewMenuTaskMenu_Control_RudderRight = new javax.swing.JMenuItem();
        treePopupNewMenuTaskMenu_Control_RudderNeutral = new javax.swing.JMenuItem();
        treePopupNewMenuTaskMenu_Control_RudderLeft = new javax.swing.JMenuItem();
        treePopupNewMenuTaskMenu_Control_Stop = new javax.swing.JMenuItem();
        treePopupNewObstacle = new javax.swing.JMenuItem();
        treePopupCopy = new javax.swing.JMenuItem();
        treePopupPaste = new javax.swing.JMenuItem();
        treePopupCut = new javax.swing.JMenuItem();
        treePopupEdit = new javax.swing.JMenuItem();
        treePopupDelete = new javax.swing.JMenuItem();
        editOptionPane = new javax.swing.JOptionPane();
        missionTreeScrollPane = new javax.swing.JScrollPane();
        missionTree = new javax.swing.JTree();
        missionMapPanel = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        MissionMenu = new javax.swing.JMenu();
        MissionMenuNew = new javax.swing.JMenuItem();
        MissionMenuSave = new javax.swing.JMenuItem();
        MissionMenuLoad = new javax.swing.JMenuItem();
        TestMenu = new javax.swing.JMenu();
        TestMenuMakeMission = new javax.swing.JMenuItem();
        TestMenuMakeAndSend = new javax.swing.JMenuItem();

        missionTreePopup.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                missionTreePopupInitialize(evt);
            }
        });

        treePopupNewMenu.setText("Neu...");

        treePopupNewMenuList.setText("Liste");
        treePopupNewMenuList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupNewMenuListActionPerformed(evt);
            }
        });
        treePopupNewMenu.add(treePopupNewMenuList);

        treePopupNewMenuTaskMenu.setText("Aufgabe");

        treePopupNewMenuTaskMenu_Navigation.setText("Navigation");

        treePopupNewMenuTaskMenu_Navigation_ReachCircle.setText("Punkt anfahren (Radius)");
        treePopupNewMenuTaskMenu_Navigation_ReachCircle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupNewMenuTaskMenu_Navigation_ReachCircleActionPerformed(evt);
            }
        });
        treePopupNewMenuTaskMenu_Navigation.add(treePopupNewMenuTaskMenu_Navigation_ReachCircle);

        treePopupNewMenuTaskMenu_Navigation_ReachPolygon.setText("Polygon anfahren (Zentrum)");
        treePopupNewMenuTaskMenu_Navigation_ReachPolygon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupNewMenuTaskMenu_Navigation_ReachPolygonActionPerformed(evt);
            }
        });
        treePopupNewMenuTaskMenu_Navigation.add(treePopupNewMenuTaskMenu_Navigation_ReachPolygon);

        treePopupNewMenuTaskMenu_Navigation_CrossLine.setText("Linie kreuzen");
        treePopupNewMenuTaskMenu_Navigation_CrossLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupNewMenuTaskMenu_Navigation_CrossLineActionPerformed(evt);
            }
        });
        treePopupNewMenuTaskMenu_Navigation.add(treePopupNewMenuTaskMenu_Navigation_CrossLine);

        treePopupNewMenuTaskMenu_Navigation_CompassCourse.setText("Kompasskurs halten");
        treePopupNewMenuTaskMenu_Navigation_CompassCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupNewMenuTaskMenu_Navigation_CompassCourseActionPerformed(evt);
            }
        });
        treePopupNewMenuTaskMenu_Navigation.add(treePopupNewMenuTaskMenu_Navigation_CompassCourse);

        treePopupNewMenuTaskMenu_Navigation_HoldAngleCourseToWind.setText("Winkel zum Wind halten");
        treePopupNewMenuTaskMenu_Navigation_HoldAngleCourseToWind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupNewMenuTaskMenu_Navigation_HoldAngleCourseToWindActionPerformed(evt);
            }
        });
        treePopupNewMenuTaskMenu_Navigation.add(treePopupNewMenuTaskMenu_Navigation_HoldAngleCourseToWind);

        treePopupNewMenuTaskMenu.add(treePopupNewMenuTaskMenu_Navigation);

        treePopupNewMenuTaskMenu_Control.setText("Steuerung");

        treePopupNewMenuTaskMenu_Control_PropellorFullForward.setText("Propellor Vorwärts");
        treePopupNewMenuTaskMenu_Control_PropellorFullForward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupNewMenuTaskMenu_Control_PropellorFullForwardActionPerformed(evt);
            }
        });
        treePopupNewMenuTaskMenu_Control.add(treePopupNewMenuTaskMenu_Control_PropellorFullForward);

        treePopupNewMenuTaskMenu_Control_PropellorFullStop.setText("Propellor Stop");
        treePopupNewMenuTaskMenu_Control_PropellorFullStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupNewMenuTaskMenu_Control_PropellorStopActionPerformed(evt);
            }
        });
        treePopupNewMenuTaskMenu_Control.add(treePopupNewMenuTaskMenu_Control_PropellorFullStop);

        treePopupNewMenuTaskMenu_Control_PropellorFullBackward.setText("Propellor Rückwärts");
        treePopupNewMenuTaskMenu_Control_PropellorFullBackward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupNewMenuTaskMenu_Control_PropellorFullBackwardActionPerformed(evt);
            }
        });
        treePopupNewMenuTaskMenu_Control.add(treePopupNewMenuTaskMenu_Control_PropellorFullBackward);

        treePopupNewMenuTaskMenu_Control_RudderRight.setText("Ruder rechts");
        treePopupNewMenuTaskMenu_Control_RudderRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupNewMenuTaskMenu_Control_RudderRightActionPerformed(evt);
            }
        });
        treePopupNewMenuTaskMenu_Control.add(treePopupNewMenuTaskMenu_Control_RudderRight);

        treePopupNewMenuTaskMenu_Control_RudderNeutral.setText("Ruder neutral");
        treePopupNewMenuTaskMenu_Control_RudderNeutral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupNewMenuTaskMenu_Control_RudderNeutralActionPerformed(evt);
            }
        });
        treePopupNewMenuTaskMenu_Control.add(treePopupNewMenuTaskMenu_Control_RudderNeutral);

        treePopupNewMenuTaskMenu_Control_RudderLeft.setText("Ruder links");
        treePopupNewMenuTaskMenu_Control_RudderLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupNewMenuTaskMenu_Control_RudderLeftActionPerformed(evt);
            }
        });
        treePopupNewMenuTaskMenu_Control.add(treePopupNewMenuTaskMenu_Control_RudderLeft);

        treePopupNewMenuTaskMenu_Control_Stop.setText("Stop");
        treePopupNewMenuTaskMenu_Control_Stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupNewMenuTaskMenu_Control_StopActionPerformed(evt);
            }
        });
        treePopupNewMenuTaskMenu_Control.add(treePopupNewMenuTaskMenu_Control_Stop);

        treePopupNewMenuTaskMenu.add(treePopupNewMenuTaskMenu_Control);

        treePopupNewMenu.add(treePopupNewMenuTaskMenu);

        treePopupNewObstacle.setText("Hindernis");
        treePopupNewObstacle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupNewObstacleActionPerformed(evt);
            }
        });
        treePopupNewMenu.add(treePopupNewObstacle);

        missionTreePopup.add(treePopupNewMenu);

        treePopupCopy.setText("Kopieren");
        treePopupCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupCopyActionPerformed(evt);
            }
        });
        missionTreePopup.add(treePopupCopy);

        treePopupPaste.setText("Einfügen");
        treePopupPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupPasteActionPerformed(evt);
            }
        });
        missionTreePopup.add(treePopupPaste);

        treePopupCut.setText("Ausschneiden");
        treePopupCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupCutActionPerformed(evt);
            }
        });
        missionTreePopup.add(treePopupCut);

        treePopupEdit.setText("Bearbeiten");
        treePopupEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupEditActionPerformed(evt);
            }
        });
        missionTreePopup.add(treePopupEdit);

        treePopupDelete.setText("Entfernen");
        treePopupDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupDeleteActionPerformed(evt);
            }
        });
        missionTreePopup.add(treePopupDelete);

        editOptionPane.setWantsInput(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MissionCreator");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        missionTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        missionTree.setComponentPopupMenu(missionTreePopup);
        missionTree.setInheritsPopupMenu(true);
        missionTreeScrollPane.setViewportView(missionTree);

        missionMapPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout missionMapPanelLayout = new javax.swing.GroupLayout(missionMapPanel);
        missionMapPanel.setLayout(missionMapPanelLayout);
        missionMapPanelLayout.setHorizontalGroup(
            missionMapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 386, Short.MAX_VALUE)
        );
        missionMapPanelLayout.setVerticalGroup(
            missionMapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        MissionMenu.setText("Mission");

        MissionMenuNew.setText("Neue Mission");
        MissionMenuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MissionMenuNewActionPerformed(evt);
            }
        });
        MissionMenu.add(MissionMenuNew);

        MissionMenuSave.setText("Speichern unter...");
        MissionMenuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MissionMenuSaveActionPerformed(evt);
            }
        });
        MissionMenu.add(MissionMenuSave);

        MissionMenuLoad.setText("Mission laden");
        MissionMenuLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MissionMenuLoadActionPerformed(evt);
            }
        });
        MissionMenu.add(MissionMenuLoad);

        menuBar.add(MissionMenu);

        TestMenu.setText("Test");

        TestMenuMakeMission.setText("Missionsgenerator testen");
        TestMenuMakeMission.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestMenuMakeMissionActionPerformed(evt);
            }
        });
        TestMenu.add(TestMenuMakeMission);

        TestMenuMakeAndSend.setText("Mission generieren & senden");
        TestMenuMakeAndSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestMenuMakeAndSendActionPerformed(evt);
            }
        });
        TestMenu.add(TestMenuMakeAndSend);

        menuBar.add(TestMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(missionTreeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(missionMapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(missionTreeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
            .addComponent(missionMapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>

    /**
     * Opens a dialog for and deals with the saving of composed missions.
     * @param evt
     */
    private void MissionMenuSaveActionPerformed(java.awt.event.ActionEvent evt) {                                                
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() || f.getName().toLowerCase().endsWith(MissionObject.FILE_EXTENSION);
            }

            @Override
            public String getDescription() {
                return MissionObject.FILE_DESCRIPTION;
            }
        });
        fc.setSelectedFile(new File(MissionSaver.DEFAULT_SAVE_PATH + MissionObject.FILE_EXTENSION));
        int state = fc.showSaveDialog(null);
        if (state == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            if (!file.getName().contains(MissionObject.FILE_EXTENSION)) file = new File(file.getAbsolutePath() + MissionObject.FILE_EXTENSION);
            //System.out.println(file.getAbsolutePath());
            
            this.missionCreatorLogic.saveMission(missionTree, file.getAbsolutePath());
        }
        else {
            JOptionPane.showMessageDialog(this, this.ERRORTEXT_ABORT_FILECHOOSER, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
        }
    }                                               

    /**
     * Resets the missionTree (current mission composing).
     * @param evt
     */
    private void MissionMenuNewActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add prompt to save missions before resetting
        this.missionCreatorLogic.missionTreeInitialize(missionTree);
    }                                              

    /**
     * Opens a dialog for and deals with the loading of composed missions.
     * @param evt
     */
    private void MissionMenuLoadActionPerformed(java.awt.event.ActionEvent evt) {                                                
        JFileChooser fc = new JFileChooser("C:/");
        fc.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() || f.getName().toLowerCase().endsWith(MissionObject.FILE_EXTENSION);
            }

            @Override
            public String getDescription() {
                return MissionObject.FILE_DESCRIPTION;
            }
        });
        int state = fc.showOpenDialog(null);
        if (state == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            //System.out.println(file.getAbsolutePath());
            
            this.missionCreatorLogic.loadMission(missionTree, file.getAbsolutePath());
        }
        else {
            JOptionPane.showMessageDialog(this, this.ERRORTEXT_ABORT_FILECHOOSER, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
        }
    }                                               

    /**
     * Deletes the currently selected node.
     * @param evt
     */
    private void treePopupDeleteActionPerformed(java.awt.event.ActionEvent evt) {                                                
        this.missionCreatorLogic.missionTreeDelete(missionTree);
    }                                               

    /**
     * Renames the currentrly selected node.
     * @param evt
     */
    private void treePopupEditActionPerformed(java.awt.event.ActionEvent evt) {                                              
        String value = "";
        value = JOptionPane.showInputDialog(this, value, this.missionTree.getSelectionModel().getSelectionPath().getLastPathComponent().toString());
        
        this.missionCreatorLogic.missionTreeEdit(missionTree, value);
    }                                             

    /**
     * Copies the currently selected node.
     * @param evt
     */
    private void treePopupCopyActionPerformed(java.awt.event.ActionEvent evt) {                                              
        this.missionCreatorLogic.missionTreeCopy(missionTree);
    }                                             

    /**
     * Cuts the currently selected node.
     * @param evt
     */
    private void treePopupCutActionPerformed(java.awt.event.ActionEvent evt) {                                             
        this.missionCreatorLogic.missionTreeCut(missionTree);
    }                                            

    /**
     * Pastes currently cut/ copied node after selection (inf if list).
     * @param evt
     */
    private void treePopupPasteActionPerformed(java.awt.event.ActionEvent evt) {                                               
        if (this.missionCreatorLogic.isLegalInsertNode(missionTree)) {
            this.missionCreatorLogic.missionTreePaste(missionTree);
        }
        else {
            JOptionPane.showMessageDialog(this, this.ERRORTEXT_ILLEGAL_INPUTNODE, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
        }
    }                                              

    /**
     * Called upon opening the missionTree-PopUp (to be exactly: upon it getting visible). Used to enable/ disable
     * menu items accordingly to current selection(s).
     * @param evt
     */
    private void missionTreePopupInitialize(javax.swing.event.PopupMenuEvent evt) {                                            
        // Check if any selection was made at all
        if (this.missionTree.getSelectionCount() > 0) {
            this.treePopupCopy.setEnabled(false);   // disable copy-command
            this.treePopupCut.setEnabled(false);    // diable cut-command
            this.treePopupDelete.setEnabled(true);  // enable delete-command
            
            // Check if exactly one item was selected
            // TODO enable handling of multiple selections like this handling starts, currently only single selections are allowed (set)
            if (this.missionTree.getSelectionCount() == 1) {
                this.treePopupNewMenu.setEnabled(true); // enable new-menu-command
                this.treePopupEdit.setEnabled(true);    // enable edit-command
                this.treePopupCopy.setEnabled(true);    // enable copy-command
                this.treePopupCut.setEnabled(true);     // enable cut-command
            }
            else {
                this.treePopupEdit.setEnabled(false);   // disable edit-command
            }
            
            // check if something was saved to missionTreeClipboard in logic, if not disable paste-command
            if (this.missionCreatorLogic.isEmptyClipboard()) {
                this.treePopupPaste.setEnabled(false);
            }
            else this.treePopupPaste.setEnabled(true);
        }
        else {
            // None selected
            this.treePopupNewMenu.setEnabled(false); // disable new-menu-command
            this.treePopupCopy.setEnabled(false);   // disable copy-command
            this.treePopupCut.setEnabled(false);    // diable cut-command
            this.treePopupDelete.setEnabled(false); // disable delete-command
            this.treePopupEdit.setEnabled(false);   // disable edit-command
            // check if something was saved to missionTreeClipboard in logic, if not disable paste-command
            if (this.missionCreatorLogic.isEmptyClipboard()) {
                this.treePopupPaste.setEnabled(false);
            }
            else this.treePopupPaste.setEnabled(true);
        }
    }                                           

    /**
     * Creates a new list in the missionTree.
     * @param evt
     */
    private void treePopupNewMenuListActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        if (this.missionCreatorLogic.isLegalInsertNode(missionTree)) {
            String value = "";
            value = JOptionPane.showInputDialog(this, this.INPUTTEXT_LIST, this.INPUTTEXT_LISTNAME);
            this.missionCreatorLogic.missionTreeNew_List(missionTree, value);
            updateMissionMap();
        }
        else {
            JOptionPane.showMessageDialog(this, this.ERRORTEXT_ILLEGAL_INPUTNODE, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
        }
    }                                                    

    /**
     * Creates a new PropellorFullForward node.
     * @param evt
     */
    private void treePopupNewMenuTaskMenu_Control_PropellorFullForwardActionPerformed(java.awt.event.ActionEvent evt) {   
    	//XXX Proopellor vorwärts, sollte gehen
        if (this.missionCreatorLogic.isLegalInsertNode(missionTree)) {
            String value = "";
            value = JOptionPane.showInputDialog(this, this.INPUTTEXT_TASK, this.INPUTTEXT_PROPELLORFORWARD);
            this.missionCreatorLogic.missionTree_NewPropellorFullForward_Task(missionTree, value);
            updateMissionMap();
        }
        else {
            JOptionPane.showMessageDialog(this, this.ERRORTEXT_ILLEGAL_INPUTNODE, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
        }
    }                                                                                     

    /**
     * Creates a new ReachCircle node.
     * @param evt
     */
    private void treePopupNewMenuTaskMenu_Navigation_ReachCircleActionPerformed(java.awt.event.ActionEvent evt) {                                                                                
        if (this.missionCreatorLogic.isLegalInsertNode(missionTree)) { 
            MissionInputPositionDialog pd = new MissionInputPositionDialog((Frame) this.getParent(), true, this.INPUTTEXT_REACHCIRCLE, this.INPUTTEXT_POSITION, 0);
            pd.setVisible(true);
            
            if (pd.getState() == MissionInputPositionDialog.APPROVE_OPTION) {
                if (pd.getGPSListSize() > 0) {
                    this.missionCreatorLogic.missionTree_NewReachCircle_Task(missionTree, pd.getChosenName(), pd.getGPSinListAt(0), pd.getRadius());
                    updateMissionMap();
                }
                else {
                    JOptionPane.showMessageDialog(null, this.ERRORTEXT_ABORT_FILECHOOSER, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
                }
            }
            else {
                JOptionPane.showMessageDialog(null, this.ERRORTEXT_ILLEGAL_POSITION, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
            }
            
            pd.dispose();
            pd = null;
        }
        else {
            JOptionPane.showMessageDialog(this, this.ERRORTEXT_ILLEGAL_INPUTNODE, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
        }
    }                                                                               

    /**
     * Creates a new CompassCourse node.
     * @param evt
     */
    private void treePopupNewMenuTaskMenu_Navigation_CompassCourseActionPerformed(java.awt.event.ActionEvent evt) {                                                                                  
        if (this.missionCreatorLogic.isLegalInsertNode(missionTree)) {
            /*String str = JOptionPane.showInputDialog(this, this.INPUTTEXT_ANGLE, "");
        
            if (str.length() != 0) {
                String value = "";
                value = JOptionPane.showInputDialog(this, this.INPUTTEXT_TASK, this.INPUTTEXT_COMPASSCOURSE + " " + str + "°");
            
                int angle = Integer.parseInt(str);
                this.missionCreatorLogic.missionTree_NewCompassCourse_Task(missionTree, value, angle);
            }
            else JOptionPane.showMessageDialog(null, this.ERRORTEXT_ILLEGAL_ANGLE, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);*/
            
            MissionInputAngleDialog ad = new MissionInputAngleDialog(null, true, this.INPUTTEXT_COMPASSCOURSE, this.INPUTTEXT_ANGLE);
            ad.setVisible(true);
            
            if (ad.getState() == MissionInputAngleDialog.APPROVE_OPTION) {
                this.missionCreatorLogic.missionTree_NewCompassCourse_Task(missionTree, ad.getChosenName(), ad.getAngle());
                updateMissionMap();
            }
            else {
                JOptionPane.showMessageDialog(null, this.ERRORTEXT_ABORT_FILECHOOSER, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
            }
            
            ad.dispose();
            ad = null;
        }
        else {
            JOptionPane.showMessageDialog(this, this.ERRORTEXT_ILLEGAL_INPUTNODE, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
        }
    }                                                                                 

    /**
     * Creates a new HoldAngleCourseToWind node.
     * @param evt
     */
    private void treePopupNewMenuTaskMenu_Navigation_HoldAngleCourseToWindActionPerformed(java.awt.event.ActionEvent evt) {                                                                                          
        if (this.missionCreatorLogic.isLegalInsertNode(missionTree)) {
            /*String str = JOptionPane.showInputDialog(this, this.INPUTTEXT_ANGLE, "");
             
            if (str.length() != 0) {
                String value = "";
                value = JOptionPane.showInputDialog(this, this.INPUTTEXT_TASK, this.INPUTTEXT_HOLDANGLETOWIND + " " + str + "°");
            
                int angle = Integer.parseInt(str);
                this.missionCreatorLogic.missionTree_NewHoldAngleToWind_Task(missionTree, value, angle);
            }
            else JOptionPane.showMessageDialog(null, this.ERRORTEXT_ILLEGAL_ANGLE, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);*/
            
            MissionInputAngleDialog ad = new MissionInputAngleDialog(null, true, this.INPUTTEXT_HOLDANGLETOWIND, this.INPUTTEXT_ANGLE);
            ad.setVisible(true);
            
            if (ad.getState() == MissionInputAngleDialog.APPROVE_OPTION) {
                this.missionCreatorLogic.missionTree_NewHoldAngleToWind_Task(missionTree, ad.getChosenName(), ad.getAngle());
                updateMissionMap();
            }
            else {
                JOptionPane.showMessageDialog(null, this.ERRORTEXT_ABORT_FILECHOOSER, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
            }
            
            ad.dispose();
            ad = null;
        }
        else {
            JOptionPane.showMessageDialog(this, this.ERRORTEXT_ILLEGAL_INPUTNODE, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
        }
    }                                                                                         

    /**
     * Creates a new PropellorFullStop node.
     * @param evt
     */
    private void treePopupNewMenuTaskMenu_Control_PropellorStopActionPerformed(java.awt.event.ActionEvent evt) {                                                                                   
        if (this.missionCreatorLogic.isLegalInsertNode(missionTree)) {
            String value = "";
            value = JOptionPane.showInputDialog(this, this.INPUTTEXT_TASK, this.INPUTTEXT_PROPELLORSTOP);
            this.missionCreatorLogic.missionTree_NewPropellorStop_Task(missionTree, value);
            updateMissionMap();
        }
        else {
            JOptionPane.showMessageDialog(this, this.ERRORTEXT_ILLEGAL_INPUTNODE, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
        }
    }                                                                                  

    /**
     * Creates a new PropellorFullBackward node.
     * @param evt
     */
    private void treePopupNewMenuTaskMenu_Control_PropellorFullBackwardActionPerformed(java.awt.event.ActionEvent evt) {  
        if (this.missionCreatorLogic.isLegalInsertNode(missionTree)) {
            String value = "";
            value = JOptionPane.showInputDialog(this, this.INPUTTEXT_TASK, this.INPUTTEXT_PROPELLORBACKWARD);
            this.missionCreatorLogic.missionTree_NewPropellorFullBackward_Task(missionTree, value);
            updateMissionMap();
        }
        else {
            JOptionPane.showMessageDialog(this, this.ERRORTEXT_ILLEGAL_INPUTNODE, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
        }
    }                                                                                      

    /**
     * Creates a new Stop node.
     * @param evt
     */
    private void treePopupNewMenuTaskMenu_Control_StopActionPerformed(java.awt.event.ActionEvent evt) {                                                                      
        if (this.missionCreatorLogic.isLegalInsertNode(missionTree)) {
            String value = "";
            value = JOptionPane.showInputDialog(this, this.INPUTTEXT_TASK, this.INPUTTEXT_STOP);
            this.missionCreatorLogic.missionTree_Stop_Task(missionTree, value);
            updateMissionMap();
        }
        else {
            JOptionPane.showMessageDialog(this, this.ERRORTEXT_ILLEGAL_INPUTNODE, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
        }
    }                                                                     

    /**
     * Tests the creation of missions by outputting the result of such.
     * @param evt
     */
    private void TestMenuMakeMissionActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        MissionObject test;
        test = new MissionObject(missionTree);
        JOptionPane.showMessageDialog(this, "Erfolgreich generiert mit " + test.getMission().getTasks().size() + " Tasks.", "Ergebnis", JOptionPane.PLAIN_MESSAGE);
    }                                                   

    /**
     * Creates a mission and attempts to send it to the boat.
     * @param evt
     */
    private void TestMenuMakeAndSendActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        MissionObject instruction = new MissionObject(missionTree);
        this.missionCreatorLogic.commitMission(instruction);
    }                                                   

    /**
     * Creates a new RudderRight node.
     * @param evt
     */
    private void treePopupNewMenuTaskMenu_Control_RudderRightActionPerformed(java.awt.event.ActionEvent evt) {                                                                             
        if (this.missionCreatorLogic.isLegalInsertNode(missionTree)) {
            String value = "";
            value = JOptionPane.showInputDialog(this, this.INPUTTEXT_TASK, this.INPUTTEXT_RUDDERRIGHT);
            updateMissionMap();
            this.missionCreatorLogic.missionTree_NewRudderRight_Task(missionTree, value);
        }
        else {
            JOptionPane.showMessageDialog(this, this.ERRORTEXT_ILLEGAL_INPUTNODE, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
        }
    }                                                                            

    /**
     * Creates a new RudderNeutral node.
     * @param evt
     */
    private void treePopupNewMenuTaskMenu_Control_RudderNeutralActionPerformed(java.awt.event.ActionEvent evt) {                                                                               
        if (this.missionCreatorLogic.isLegalInsertNode(missionTree)) {
            String value = "";
            value = JOptionPane.showInputDialog(this, this.INPUTTEXT_TASK, this.INPUTTEXT_RUDDERNEUTRAL);
            this.missionCreatorLogic.missionTree_NewRudderNeutral_Task(missionTree, value);
            updateMissionMap();
        }
        else {
            JOptionPane.showMessageDialog(this, this.ERRORTEXT_ILLEGAL_INPUTNODE, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
        }
    }                                                                              

    /**
     * Creates a new RudderLeft node.
     * @param evt
     */
    private void treePopupNewMenuTaskMenu_Control_RudderLeftActionPerformed(java.awt.event.ActionEvent evt) {                                                                            
        if (this.missionCreatorLogic.isLegalInsertNode(missionTree)) {
            String value = "";
            value = JOptionPane.showInputDialog(this, this.INPUTTEXT_TASK, this.INPUTTEXT_RUDDERLEFT);
            this.missionCreatorLogic.missionTree_NewRudderLeft_Task(missionTree, value);
            updateMissionMap();
        }
        else {
            JOptionPane.showMessageDialog(this, this.ERRORTEXT_ILLEGAL_INPUTNODE, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
        }
    }                                                                           

    /**
     * Creates a new ReachPolygon node.
     * @param evt
     */
    private void treePopupNewMenuTaskMenu_Navigation_ReachPolygonActionPerformed(java.awt.event.ActionEvent evt) {                                                                                 
        if (this.missionCreatorLogic.isLegalInsertNode(missionTree)) { 
            MissionInputPositionDialog pd = new MissionInputPositionDialog(null, true, this.INPUTTEXT_REACHPOLYGON, this.INPUTTEXT_POSITION, 1);
            pd.setVisible(true);
            
            if (pd.getState() == MissionInputPositionDialog.APPROVE_OPTION) {
                if (pd.getGPSListSize() >= 3) {
                    // make GPS list
                    List<GPS> gpsList = new ArrayList<GPS>();
                    for (int i = 0; i < pd.getGPSListSize(); i++) {
                        gpsList.add(pd.getGPSinListAt(i));
                    }
                    this.missionCreatorLogic.missionTree_NewReachPolygon_Task(missionTree, pd.getChosenName(), gpsList);
                    updateMissionMap();
                }
                else {
                    JOptionPane.showMessageDialog(null, this.ERRORTEXT_ABORT_FILECHOOSER + " (" + pd.getGPSListSize() + ")", this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
                }
            }
            else {
                JOptionPane.showMessageDialog(null, this.ERRORTEXT_ILLEGAL_POSITION, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
            }
            
            pd.dispose();
            pd = null;
        }
        else {
            JOptionPane.showMessageDialog(this, this.ERRORTEXT_ILLEGAL_INPUTNODE, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
        }
    }                                                                                

    /**
     * Creates a new CrossLine node.
     * @param evt
     */
    private void treePopupNewMenuTaskMenu_Navigation_CrossLineActionPerformed(java.awt.event.ActionEvent evt) {                                                                              
        if (this.missionCreatorLogic.isLegalInsertNode(missionTree)) { 
            MissionInputPositionDialog pd = new MissionInputPositionDialog(null, true, this.INPUTTEXT_CROSSLINE, this.INPUTTEXT_POSITION, 1);
            pd.setVisible(true);
            
            if (pd.getState() == MissionInputPositionDialog.APPROVE_OPTION) {
                if (pd.getGPSListSize() == 2) {
                    // make GPS list
                    this.missionCreatorLogic.missionTree_NewCrossLine_Task(missionTree, pd.getChosenName(), pd.getGPSinListAt(0), pd.getGPSinListAt(1));
                    updateMissionMap();
                }
                else {
                    JOptionPane.showMessageDialog(null, this.ERRORTEXT_ABORT_FILECHOOSER, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
                }
            }
            else {
                JOptionPane.showMessageDialog(null, this.ERRORTEXT_ILLEGAL_POSITION, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
            }
            
            pd.dispose();
            pd = null;
        }
        else {
            JOptionPane.showMessageDialog(this, this.ERRORTEXT_ILLEGAL_INPUTNODE, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
        }
    }                                                                             

    /**
     * Creates a new Obstacle node.
     * @param evt
     */
    private void treePopupNewObstacleActionPerformed(java.awt.event.ActionEvent evt) {
         if (this.missionCreatorLogic.isLegalInsertNode(missionTree)) { 
            MissionInputPositionDialog pd = new MissionInputPositionDialog(null, true, this.INPUTTEXT_OBSTACLENAME, this.INPUTTEXT_OBSTACLE, 2);
            pd.setVisible(true);
            
            if (pd.getState() == MissionInputPositionDialog.APPROVE_OPTION) {
                if (pd.getObstacleListSize() > 0) {
                    this.missionCreatorLogic.missionTree_NewObstacle(missionTree, pd.getChosenName(), pd.getObstacleAt(0));
                    this.missionMap.setObstacles(pd.getObstacleList()); // FIXME remove obstacle handling stub
                    updateMissionMap();
                }
                else {
                    JOptionPane.showMessageDialog(null, this.ERRORTEXT_ABORT_FILECHOOSER, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
                }
            }
            else {
                JOptionPane.showMessageDialog(null, this.ERRORTEXT_ILLEGAL_POSITION, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
            }
            
            pd.dispose();
            pd = null;
        }
        else {
            JOptionPane.showMessageDialog(this, this.ERRORTEXT_ILLEGAL_INPUTNODE, this.ERRORTEXT, JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Updates the mission map.
     */
    private void updateMissionMap() {
        
        //FIXME *convince* paul into finishing the promised overload for visualize
        /*GUIModelImpl paul = new GUIModelImpl();
        Mission mission = new MissionObject(this.missionTree).getMission();
        paul.setCurrentWholeMission(mission);
        paul.setMissionTasksLeft(mission);
        if (!mission.getTasks().isEmpty()) this.missionMap.visualizeMission(paul);*/
        
        Mission mission = new MissionObject(this.missionTree).getMission();
        if (!mission.getTasks().isEmpty()) this.missionMap.visualizeMission(mission);
    }
    
    /**
     * Gets the currently set obstacles.
     * @return
     */
    public List<MapMarker> getObstacleList() {
    	return this.missionMap.getObstacles();
    }
    
    // Variables declaration - do not modify
    private javax.swing.JMenu MissionMenu;
    private javax.swing.JMenuItem MissionMenuLoad;
    private javax.swing.JMenuItem MissionMenuNew;
    private javax.swing.JMenuItem MissionMenuSave;
    private javax.swing.JMenu TestMenu;
    private javax.swing.JMenuItem TestMenuMakeAndSend;
    private javax.swing.JMenuItem TestMenuMakeMission;
    private javax.swing.JOptionPane editOptionPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel missionMapPanel;
    private javax.swing.JTree missionTree;
    private javax.swing.JPopupMenu missionTreePopup;
    private javax.swing.JScrollPane missionTreeScrollPane;
    private javax.swing.JMenuItem treePopupCopy;
    private javax.swing.JMenuItem treePopupCut;
    private javax.swing.JMenuItem treePopupDelete;
    private javax.swing.JMenuItem treePopupEdit;
    private javax.swing.JMenu treePopupNewMenu;
    private javax.swing.JMenuItem treePopupNewMenuList;
    private javax.swing.JMenu treePopupNewMenuTaskMenu;
    private javax.swing.JMenu treePopupNewMenuTaskMenu_Control;
    private javax.swing.JMenuItem treePopupNewMenuTaskMenu_Control_PropellorFullBackward;
    private javax.swing.JMenuItem treePopupNewMenuTaskMenu_Control_PropellorFullForward;
    private javax.swing.JMenuItem treePopupNewMenuTaskMenu_Control_PropellorFullStop;
    private javax.swing.JMenuItem treePopupNewMenuTaskMenu_Control_RudderLeft;
    private javax.swing.JMenuItem treePopupNewMenuTaskMenu_Control_RudderNeutral;
    private javax.swing.JMenuItem treePopupNewMenuTaskMenu_Control_RudderRight;
    private javax.swing.JMenuItem treePopupNewMenuTaskMenu_Control_Stop;
    private javax.swing.JMenu treePopupNewMenuTaskMenu_Navigation;
    private javax.swing.JMenuItem treePopupNewMenuTaskMenu_Navigation_CompassCourse;
    private javax.swing.JMenuItem treePopupNewMenuTaskMenu_Navigation_CrossLine;
    private javax.swing.JMenuItem treePopupNewMenuTaskMenu_Navigation_HoldAngleCourseToWind;
    private javax.swing.JMenuItem treePopupNewMenuTaskMenu_Navigation_ReachCircle;
    private javax.swing.JMenuItem treePopupNewMenuTaskMenu_Navigation_ReachPolygon;
    private javax.swing.JMenuItem treePopupNewObstacle;
    private javax.swing.JMenuItem treePopupPaste;
    // End of variables declaration
}
