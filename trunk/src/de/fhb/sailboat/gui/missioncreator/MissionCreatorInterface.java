package de.fhb.sailboat.gui.missioncreator;

/**
 *
 * @author Patrick Rutter
 */
public class MissionCreatorInterface extends javax.swing.JDialog {

    /**
     * MissionCreatorLogic to be used. Hosts all non-interface application logic.
     */
    private MissionCreatorLogic missionCreatorLogic;
    
    private String editOptionPane_Text = "";
    private String editOptionPane_Value = "";
    
    /**
     * Creates new form MissionCreatorInterface
     */
    public MissionCreatorInterface(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.missionCreatorLogic = new MissionCreatorLogic();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        missionTreePopup = new javax.swing.JPopupMenu();
        treePopupNewMenu = new javax.swing.JMenu();
        treePopupNewMenuList = new javax.swing.JMenuItem();
        treePopupNewMenuTaskMenu = new javax.swing.JMenu();
        treePopupNewMenuTaskMenu_Navigation = new javax.swing.JMenu();
        treePopupNewMenuTaskMenu_Navigation_ReachCircle = new javax.swing.JMenuItem();
        treePopupNewMenuTaskMenu_Control = new javax.swing.JMenu();
        treePopupNewMenuTaskMenu_Control_PropellorFullForward = new javax.swing.JMenuItem();
        treePopupNewMenuTaskMenu_Control_PropellorFullStop = new javax.swing.JMenuItem();
        treePopupNewMenuTaskMenu_Control_PropellorFullBackward = new javax.swing.JMenuItem();
        treePopupDelete = new javax.swing.JMenuItem();
        treePopupEdit = new javax.swing.JMenuItem();
        treePopupCopy = new javax.swing.JMenuItem();
        treePopupCut = new javax.swing.JMenuItem();
        treePopupPaste = new javax.swing.JMenuItem();
        editOptionPane = new javax.swing.JOptionPane();
        missionTreeScrollPane = new javax.swing.JScrollPane();
        missionTree = new javax.swing.JTree();
        menuBar = new javax.swing.JMenuBar();
        MissionMenu = new javax.swing.JMenu();
        MissionMenuNew = new javax.swing.JMenuItem();
        MissionMenuSave = new javax.swing.JMenuItem();
        MissionMenuLoad = new javax.swing.JMenuItem();

        missionTreePopup.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                missionTreePopupInitialize(evt);
            }
        });

        treePopupNewMenu.setText("Neu...");

        treePopupNewMenuList.setText("Liste");
        treePopupNewMenu.add(treePopupNewMenuList);

        treePopupNewMenuTaskMenu.setText("Aufgabe");

        treePopupNewMenuTaskMenu_Navigation.setText("Navigation");

        treePopupNewMenuTaskMenu_Navigation_ReachCircle.setText("Punkt anfahren (Radius)");
        treePopupNewMenuTaskMenu_Navigation.add(treePopupNewMenuTaskMenu_Navigation_ReachCircle);

        treePopupNewMenuTaskMenu.add(treePopupNewMenuTaskMenu_Navigation);

        treePopupNewMenuTaskMenu_Control.setText("Steuerung");

        treePopupNewMenuTaskMenu_Control_PropellorFullForward.setText("Propellor Vorwärts");
        treePopupNewMenuTaskMenu_Control.add(treePopupNewMenuTaskMenu_Control_PropellorFullForward);

        treePopupNewMenuTaskMenu_Control_PropellorFullStop.setText("Propellor Stop");
        treePopupNewMenuTaskMenu_Control.add(treePopupNewMenuTaskMenu_Control_PropellorFullStop);

        treePopupNewMenuTaskMenu_Control_PropellorFullBackward.setText("Propellor Rückwärts");
        treePopupNewMenuTaskMenu_Control.add(treePopupNewMenuTaskMenu_Control_PropellorFullBackward);

        treePopupNewMenuTaskMenu.add(treePopupNewMenuTaskMenu_Control);

        treePopupNewMenu.add(treePopupNewMenuTaskMenu);

        missionTreePopup.add(treePopupNewMenu);

        treePopupDelete.setText("Entfernen");
        treePopupDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupDeleteActionPerformed(evt);
            }
        });
        missionTreePopup.add(treePopupDelete);

        treePopupEdit.setText("Bearbeiten");
        treePopupEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupEditActionPerformed(evt);
            }
        });
        missionTreePopup.add(treePopupEdit);

        treePopupCopy.setText("Kopieren");
        treePopupCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupCopyActionPerformed(evt);
            }
        });
        missionTreePopup.add(treePopupCopy);

        treePopupCut.setText("Ausschneiden");
        treePopupCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupCutActionPerformed(evt);
            }
        });
        missionTreePopup.add(treePopupCut);

        treePopupPaste.setText("Einfügen");
        treePopupPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePopupPasteActionPerformed(evt);
            }
        });
        missionTreePopup.add(treePopupPaste);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MissionCreator");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Mission");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Tonne anfahren");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("ReachCircleTask 1");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("BreakCourseTask 1");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("ReachCircleTask 2");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Tonne umsegeln");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("RoundCourseTask 1");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Zur Ziellinie fahren");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("ReachLineTask 1");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        missionTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        missionTree.setComponentPopupMenu(missionTreePopup);
        missionTree.setInheritsPopupMenu(true);
        missionTreeScrollPane.setViewportView(missionTree);

        MissionMenu.setText("Mission");

        MissionMenuNew.setText("Neue Mission");
        MissionMenuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MissionMenuNewActionPerformed(evt);
            }
        });
        MissionMenu.add(MissionMenuNew);

        MissionMenuSave.setText("Speichern unter...");
        MissionMenuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MissionMenuSaveActionPerformed(evt);
            }
        });
        MissionMenu.add(MissionMenuSave);

        MissionMenuLoad.setText("Mission laden");
        MissionMenuLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MissionMenuLoadActionPerformed(evt);
            }
        });
        MissionMenu.add(MissionMenuLoad);

        menuBar.add(MissionMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(missionTreeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(missionTreeScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>

    private void MissionMenuSaveActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    private void MissionMenuNewActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void MissionMenuLoadActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    private void treePopupDeleteActionPerformed(java.awt.event.ActionEvent evt) {
        System.out.println(this.missionTree.getSelectionModel().getSelectionPath().getLastPathComponent().toString());
    }

    private void treePopupEditActionPerformed(java.awt.event.ActionEvent evt) {
 
    }

    private void treePopupCopyActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void treePopupCutActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void treePopupPasteActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    /*
     * Called upon opening the missionTree-PopUp (to be exactly: upon it getting visible). Used to enable/ disable
     * menu items accordingly to current selection(s).
     */
    private void missionTreePopupInitialize(javax.swing.event.PopupMenuEvent evt) {
        // Check if any selection was made at all
        if (this.missionTree.getSelectionCount() > 0) {
            this.treePopupCopy.setEnabled(true);    // enable copy-command
            this.treePopupCut.setEnabled(true);     // enable cut-command
            this.treePopupDelete.setEnabled(true);  // enable delete-command
            
            // Check if exactly one item was selected
            if (this.missionTree.getSelectionCount() == 1) {
                this.treePopupEdit.setEnabled(true);    // enable edit-command
            }
            else {
                this.treePopupEdit.setEnabled(false);   // disable edit-command
            }
        }
        else {
            // None selected
            this.treePopupCopy.setEnabled(false);   // disable copy-command
            this.treePopupCut.setEnabled(false);    // diable cut-command
            this.treePopupDelete.setEnabled(false); // disable delete-command
            this.treePopupEdit.setEnabled(false);   // disable edit-command
            // check if something was saved to missionTreeClipboard in logic, if not disable paste-command
            if (this.missionCreatorLogic.getMissionTreeClipboard().isEmpty()) {
                this.treePopupPaste.setEnabled(false);
            }
            else this.treePopupPaste.setEnabled(true);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MissionCreatorInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MissionCreatorInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MissionCreatorInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MissionCreatorInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                MissionCreatorInterface dialog = new MissionCreatorInterface(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify
    private javax.swing.JMenu MissionMenu;
    private javax.swing.JMenuItem MissionMenuLoad;
    private javax.swing.JMenuItem MissionMenuNew;
    private javax.swing.JMenuItem MissionMenuSave;
    private javax.swing.JOptionPane editOptionPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTree missionTree;
    private javax.swing.JPopupMenu missionTreePopup;
    private javax.swing.JScrollPane missionTreeScrollPane;
    private javax.swing.JMenuItem treePopupCopy;
    private javax.swing.JMenuItem treePopupCut;
    private javax.swing.JMenuItem treePopupDelete;
    private javax.swing.JMenuItem treePopupEdit;
    private javax.swing.JMenu treePopupNewMenu;
    private javax.swing.JMenuItem treePopupNewMenuList;
    private javax.swing.JMenu treePopupNewMenuTaskMenu;
    private javax.swing.JMenu treePopupNewMenuTaskMenu_Control;
    private javax.swing.JMenuItem treePopupNewMenuTaskMenu_Control_PropellorFullBackward;
    private javax.swing.JMenuItem treePopupNewMenuTaskMenu_Control_PropellorFullForward;
    private javax.swing.JMenuItem treePopupNewMenuTaskMenu_Control_PropellorFullStop;
    private javax.swing.JMenu treePopupNewMenuTaskMenu_Navigation;
    private javax.swing.JMenuItem treePopupNewMenuTaskMenu_Navigation_ReachCircle;
    private javax.swing.JMenuItem treePopupPaste;
    // End of variables declaration
}
